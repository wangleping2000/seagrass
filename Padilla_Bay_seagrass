var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.57359622524453, 48.63789468943517],
          [-122.57359622524453, 48.454020421027025],
          [-122.40330813930703, 48.454020421027025],
          [-122.40330813930703, 48.63789468943517]]], null, false),
    water = 
    /* color: #0a39ff */
    /* shown: false */
    ee.Geometry.MultiPoint(
        [[-122.51427268001962, 48.62108003637361],
         [-122.51255606625008, 48.60859631745114],
         [-122.54173850033212, 48.600196442446624],
         [-122.54276846859383, 48.55953948003076],
         [-122.53040884945321, 48.533629172968496],
         [-122.53109549496102, 48.50042642228514],
         [-122.55924796078133, 48.55181323278964],
         [-122.54225348446298, 48.62448689374783],
         [-122.56512397638852, 48.61124123336333],
         [-122.54658454767758, 48.51081068594036],
         [-122.49302619806821, 48.61623482977323],
         [-122.53166999696879, 48.62070019997478],
         [-122.52823676942972, 48.60481117514884],
         [-122.50537096121029, 48.600698486727374],
         [-122.5280302629681, 48.59434095909244],
         [-122.48889146902279, 48.601152565228894],
         [-122.52116380788998, 48.591161895240916],
         [-122.49919115163998, 48.596611596522784],
         [-122.47790514089779, 48.59797392999602],
         [-122.54519640066341, 48.55117945670937],
         [-122.54313646413998, 48.52981224716116],
         [-122.51429735281185, 48.5034317677063],
         [-122.51017747976498, 48.49205663461244],
         [-122.54588304617123, 48.55072492913897],
         [-122.56373582937435, 48.5711746278642],
         [-122.57060228445248, 48.59434095909244]]),
    flat = 
    /* color: #f14808 */
    /* shown: false */
    ee.Geometry.MultiPoint(
        [[-122.44955634090829, 48.5790798190055],
         [-122.4612293145411, 48.569993505451365],
         [-122.47702216122079, 48.56567693444962],
         [-122.5048313042872, 48.550679666929746],
         [-122.50998114559579, 48.52089919202558],
         [-122.48621267882022, 48.50457658173919],
         [-122.48792929258975, 48.469533786962714],
         [-122.50543875303897, 48.46543629532276],
         [-122.49336952082211, 48.46767877075755],
         [-122.48924964777524, 48.520918005543734],
         [-122.4377512346893, 48.587174254988554],
         [-122.48478645197446, 48.56264138907254],
         [-122.51087898127133, 48.56127810301964],
         [-122.45043932058529, 48.58639292441322],
         [-122.45867906667904, 48.578897918071604],
         [-122.48065172292904, 48.580714991364346],
         [-122.4947279558392, 48.506161419857385],
         [-122.51567064382748, 48.546406713584695],
         [-122.51910387136654, 48.56208689355164],
         [-122.47550188162045, 48.577535070236955],
         [-122.44185625173763, 48.582304876914506],
         [-122.49266801931576, 48.578216498747],
         [-122.46520219900326, 48.567539730104265],
         [-122.51635728933529, 48.53731452898568],
         [-122.49266801931576, 48.53504122764268],
         [-122.50434099294857, 48.55776964766988]]),
    imageCollection = ee.ImageCollection("COPERNICUS/S1_GRD");


var dataset = ee.ImageCollection("UQ/murray/Intertidal/v1_1/global_intertidal");
var img_num = dataset.size();
print('tidal flats',dataset)

var tidalflats = ee.Image(dataset.toList(img_num).get(10));
var visualization = {
  bands: ['classification'],
  min: 0,
  max: 1,
  palette: ['0000ff']
};
Map.addLayer(tidalflats, visualization, 'Intertidal areas');

////////////////////////////////// MLTC ///////////////////////////////////
Map.centerObject(geometry,12);
var startDate = '2023-01-01';
var endDate = '2024-01-01';
var s2_cloudmask = require('users/wanglp2000/export:s2cloudmask');
var s2_all_cloudmask = s2_cloudmask.s2cloudmask(startDate,endDate,geometry,70)
                         .map(function(image){return image.clip(geometry)});
                         
print(s2_all_cloudmask)
var num_img = s2_all_cloudmask.size();
var prj = s2_all_cloudmask.first().select('B1').projection()
var crs = prj.getInfo()['crs']
print(crs);

// solve the problems of one site has different tiles in one day
function mosaicByDate(imcol){
  // convert the ImageCollection into List
  var imlist = imcol.toList(imcol.size());
  
  // Obtain the distinct image dates from the ImageCollection
  var unique_dates = imlist.map(function(im){
    return ee.Image(im).date().format("YYYY-MM-dd");
  }).distinct();
  
  // mosaic the images acquired on the same date
  var mosaic_imlist = unique_dates.map(function(d){
    d = ee.Date(d);
    var im = imcol.filterDate(d, d.advance(1, "day")).mosaic();
    // return the mosaiced same-date images and set the time properties
    return im.set(
      "system:time_start", d.millis(), 
      "system:id", d.format("YYYY-MM-dd")
      );
  });
  return ee.ImageCollection(mosaic_imlist);
} 

var s2_all_cloudmask_collection = mosaicByDate(s2_all_cloudmask);
//print(s2_all_cloudmask_collection);

// single image 

// All the images have area
function imagearea(image){
  var constant = image.select('B1').divide(image.select('B1')).unmask();
  var image1 = constant.toInt16().clip(geometry);
  var image_vector = image1.reduceToVectors({'scale':60,'maxPixels': 1e13});
  image1 = ee.Image.pixelArea().divide(1e6);
  var area_image = image1.reduceRegion({
          reducer:ee.Reducer.sum(),
          geometry:image_vector,
          crs:image1.projection(),
          scale:60,
          maxPixels:1e13
  });
  var image_area = ee.Number(area_image.get('area'));
  return image.set('imagearea',image_area);
}  

var s2_all_cloudmask_collection_lesscloud = s2_all_cloudmask_collection.map(imagearea)

function cloudarea(image){
  // To get the cloud of all the images, 0 is cloud
  var image_cloud = (image.select('B1').unmask()).updateMask((image.select('B1').unmask()).eq(0)).toInt16().clip(geometry);
  // get vectors of cloud
  var vector = image_cloud.reduceToVectors({'scale':100,'maxPixels': 1e13,'tileScale': 16});
  image_cloud = ee.Image.pixelArea().divide(1e6);
  // calculate area
  var area_cloud = image_cloud.reduceRegion({
          reducer:ee.Reducer.sum(),
          geometry:vector,
          crs:image_cloud.projection(),
          scale:100,
          maxPixels:1e13
  });
  var area = (image.get('imagearea'));
  var cloud_cover = area_cloud.get('area');
  // get the proportion of cloud
  var cloudproportion = ee.Number(cloud_cover).divide(ee.Number(area));
  return image.set('cloudarea',cloud_cover)
              .set('cloudproportion',cloudproportion);
}
 
var band = ['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B9','B11','B12','NDVI','NDWI'];

// cloudmask
s2_all_cloudmask_collection_lesscloud = s2_all_cloudmask_collection_lesscloud.map(cloudarea).filter(ee.Filter.lt('cloudproportion',0.25))
.map(function(image){return image.reproject({'crs':crs,'scale':10})}).map(NDVI).map(NDWI);

var img_num = s2_all_cloudmask_collection_lesscloud.size();
print('img_num',img_num);

var green_images = s2_all_cloudmask_collection_lesscloud
                  .map(function(img){return addNDVI(img,flat)})
                  .sort('MeanNDVI',false);
print('green_images',green_images)                  
print(green_images.aggregate_array('MeanNDVI'))


var MLTC = green_images.limit(img_num.divide(10).round()).median().reproject({'crs':crs,'scale':10}); // 10%~20%
Map.addLayer(MLTC,{bands:['B8','B4','B3'],max:0.3,min:0},'MLTC');

////////////////////////////////// MLCSAR ///////////////////////////////////
imageCollection = imageCollection.filterBounds(geometry)
                  .filterDate(startDate,endDate);
print(imageCollection)

var prj = imageCollection.first().select('VV').projection()
var crs = prj.getInfo()['crs']
print(crs);

var whole_image = ee.Image(1).clip(geometry);
Map.addLayer(whole_image,{max:2,min:0},'whole_image')



var area = area_sum(whole_image).get('image_area');
print(area)

                    
var thre = ee.Number(area).multiply(ee.Number(0.8));

var s1_preprocces_view = imageCollection.map(function(image){return image.clip(geometry)})
                    .map(area_sum).filter(ee.Filter.gt('image_area',thre))
print('s1_preprocces_view',s1_preprocces_view)

var S1_images = s1_preprocces_view.map(addVV_flat).map(addVV_water).map(add_DFW_VV)
                .map(addVH_flat).map(addVH_water).map(add_DFW_VH).sort('flat_water_diff_VV',false);

var img_num = S1_images.size();

                
print(S1_images.sort('flat_water_diff_VV',false).aggregate_array('flat_water_diff_VV')) // 
var MLCSAR = S1_images.sort('flat_water_diff_VV',false).limit(S1_images.size().divide(3).round()).median().reproject({'crs':crs,'scale':10});
var image_VV = MLCSAR.select('VV');
var image_VH = MLCSAR.select('VH')
Map.addLayer(image_VV,{bands:['VV'],max:-10,min:-30},'image_VV');
Map.addLayer(image_VH,{bands:['VH'],max:-10,min:-30},'image_VH');

var threshold3 = otsu(image_VH.select('VH'));
var remove_water3 = MLTC.updateMask(image_VH.select('VH').lt(threshold3));
Map.addLayer(remove_water3,{bands:['B8','B4','B3'],max:0.3,min:0},'remove_water3');

var intersection_water = remove_water3.select('B3').divide(remove_water3.select('B3'));
                       
Map.addLayer(intersection_water,{max:2,min:1},'intersection_water');

var vectors = intersection_water.int16().reduceToVectors({
  geometry: geometry,
  crs: crs,
  scale: 20,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'tide',
  tileScale: 16,
  maxPixels: 1e13
});

var max_water = vectors.filterBounds(flat);
var max_water_buffer = max_water.geometry().buffer({'distance':-20,'maxError':1})
Map.addLayer(max_water_buffer,{'color':'#ffa308'},'max_water_buffer');

var band = ['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B9','B11','B12','NDVI','NDWI'];

//////////////////////////////// Extracting intertidal seagrass ///////////////////////////////////
var palettes = require('users/gena/packages:palettes');
var palette = palettes.misc.tol_rainbow[7];

MLTC = remove_water(MLTC);
var image_ndvi = MLTC.clip(max_water_buffer);
var threshold = otsu(image_ndvi.select(['NDVI']));
// print('threshold',threshold);
var sg = image_ndvi.select('NDVI').updateMask(image_ndvi.select('NDVI').gt(threshold));
Map.addLayer(sg,{palette:palette},'sg');

var seagrass = sg.select('NDVI').divide(sg.select('NDVI')).toInt16();
Map.addLayer(seagrass,{max:1,min:1,palette: ['#0cff31']},'seagrass');

var seagrass_shp = seagrass.reduceToVectors({
  geometry: geometry,
  crs: crs,
  scale: 10,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'tide',
  tileScale: 16,
  maxPixels: 1e13
});

Map.addLayer(seagrass_shp,{},'seagrass_shp');

//{

  
/// otsu ///
function otsu1(histogram) {
    
    var counts = ee.Array(ee.Dictionary(histogram).get('histogram'))
    
    var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'))
    
    var size = means.length().get([0])
    
    var total = counts.reduce(ee.Reducer.sum(), [0]).get([0])
    
    var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0])
    
    var mean = sum.divide(total)

    
    var indices = ee.List.sequence(1, size)
    
    var bss = indices.map(function (i) {
        
        var aCounts = counts.slice(0, 0, i)
        var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0])
        var aMeans = means.slice(0, 0, i)
        
        var aMean = aMeans.multiply(aCounts)
            .reduce(ee.Reducer.sum(), [0]).get([0])
            .divide(aCount)

        var bCount = total.subtract(aCount)
        
        var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount)
        
        return aCount.multiply(aMean.subtract(mean).pow(2)).add(
            bCount.multiply(bMean.subtract(mean).pow(2)))
    })


    return means
        .sort(bss)
        .get([-1])
}


function otsu(image) {
    var histogram = image.reduceRegion({
        reducer: ee.Reducer.histogram(1000, 0.01)
            .combine('mean', null, true)
            .combine('variance', null, true),
        geometry: geometry,
        scale: 30,
        bestEffort: true,
        tileScale:16
    });
    
    return otsu1(histogram.get(histogram.keys().get(0)));
}  

// }

function remove_water(img){
  var image_ndwi = img.select(['NDWI']);
  img = img.updateMask(image_ndwi.lt(0));
  return img;
}

/////////----------------------------------------/////////

function addVV_flat(img){ // Calculating median VV of tidal flat samples
  var img2 = img.select("VV")
  var value = img2.reduceRegion({'reducer':ee.Reducer.median(), 'geometry':flat, 'maxPixels':1e16, 'scale':20,'tileScale':16})
  return img.set('MeanVV_flat', ee.Number(value.get("VV")))
}

function addVH_flat(img){ // Calculating median VH of tidal flat samples
  var img2 = img.select("VH")
  var value = img2.reduceRegion({'reducer':ee.Reducer.median(), 'geometry':flat, 'maxPixels':1e16, 'scale':20, 'tileScale':16})
  return img.set('MeanVH_flat', ee.Number(value.get("VH")))
}

function addVV_water(img){ // Calculating median VV of water samples
  var img2 = img.select("VV")
  var value = img2.reduceRegion({'reducer':ee.Reducer.median(), 'geometry':water, 'maxPixels':1e16, 'scale':20,'tileScale':16})
  return img.set('MeanVV_water', ee.Number(value.get("VV")))
}

function addVH_water(img){ // Calculating median VH of water samples
  var img2 = img.select("VH")
  var value = img2.reduceRegion({'reducer':ee.Reducer.median(), 'geometry':water, 'maxPixels':1e16, 'scale':20,'tileScale':16})
  return img.set('MeanVH_water', ee.Number(value.get("VH")))
}

function add_DFW_VV(image){
  var water_VV = image.get('MeanVV_water');
  var flat_VV = image.get('MeanVV_flat');
  var flat_water_VV = ee.Number(flat_VV).subtract(ee.Number(water_VV)).abs();
  return image.set('flat_water_diff_VV',flat_water_VV);
}

function add_DFW_VH(image){
  var water_VH = image.get('MeanVH_water');
  var flat_VH = image.get('MeanVH_flat');
  var flat_water_VH = ee.Number(flat_VH).subtract(ee.Number(water_VH)).abs();
  return image.set('flat_water_diff_VH',flat_water_VH);
}

function NDVI(image) {
  return image.addBands(
    image.normalizedDifference(["B8", "B4"])
        .rename("NDVI"));
}

function addNDVI(img,sample){ // Calculating mean NDVI of tidal flat samples
  var img2 = img.select("NDVI");
  var value = img2.reduceRegion({reducer:ee.Reducer.mean(),geometry:sample,maxPixels:1e16})
  return img.set('MeanNDVI', ee.Number(value.get("NDVI")));
}


function NDWI(image) {    
  return image.addBands(
    image.normalizedDifference(["B3", "B8"])
        .rename("NDWI"));
}

function addNDWI(img,sample){ // Calculating mean NDWI of tidal flat samples
  var img2 = img.select("NDWI");
  var value = img2.reduceRegion({reducer:ee.Reducer.mean(),geometry:sample,maxPixels:1e16})
  return img.set('MeanNDWI', ee.Number(value.get("NDWI")));
}

function MNDWI(image) {    
  return image.addBands(
    image.normalizedDifference(["B3", "B11"])
        .rename("MNDWI"));
}

function area_sum(image){
  var band = ee.String(image.bandNames().get(0));
  var area = image.select(band).divide(image.select(band)).reduceRegion({
      reducer:ee.Reducer.sum(),
      geometry:geometry,
      crs:crs,
      scale:500,
      maxPixels:1e16
  });
  var image_area = ee.Number(area.values().get(0));
  return image.set('image_area',image_area);
}



// }
